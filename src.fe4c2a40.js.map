{"version":3,"sources":["utils.js","components/picture.js","components/picture-canvas.js","app.js","controls/color-select.js","controls/tool-select.js","controls/index.js","tools.js","components/load-button.js","components/save-button.js","components/undo-button.js","components/redo-button.js","components/index.js","index.js"],"names":["updateState","state","action","elt","type","props","dom","document","createElement","Object","assign","children","child","appendChild","createTextNode","hex","n","toString","padStart","Picture","width","height","pixels","x","y","copy","slice","color","Array","fill","drawPicture","picture","canvas","scale","ctx","getContext","fillStyle","pixel","fillRect","SCALE","PictureCanvas","pointerDown","onmousedown","event","mouse","ontouchstart","touch","syncState","pointerPosition","pos","domNode","rect","getBoundingClientRect","Math","floor","clientX","left","clientY","top","prototype","downEvent","onDown","button","onMove","addEventListener","move","moveEvent","buttons","removeEventListener","newPos","startEvent","touches","preventDefault","PixelEditor","config","tools","controls","dispatch","tool","map","Control","reduce","a","c","concat","ColorSelect","input","value","onchange","ToolSelect","select","keys","name","selected","draw","drawPixel","drawn","rectangle","start","drawRectangle","xStart","min","yStart","xEnd","max","yEnd","push","circle","drawCircle","radius","sqrt","pow","centerX","centerY","around","dx","dy","targetColor","done","length","some","p","pick","LoadButton","_","onclick","startLoad","finishLoad","files","body","click","remove","file","reader","FileReader","image","onload","pictureFromImage","src","result","readAsDataURL","drawImage","data","getImageData","i","r","g","b","SaveButton","save","link","href","toDataURL","download","UndoButton","undo","disabled","RedoButton","redo","redone","INITIAL_STATE","empty","doneAt","baseTools","baseControls","historyUpdateState","pop","Date","now","startPixelEditor","app","getElementById"],"mappings":"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","file":"src.fe4c2a40.js","sourceRoot":"../src","sourcesContent":["/**\n * Update object state\n */\nexport function updateState(state, action) {\n  return { ...state, ...action }\n}\n\n/**\n * A less verbose DOM builder\n */\nexport function elt(type, props, ...children) {\n  let dom = document.createElement(type)\n  if (props) {\n    Object.assign(dom, props)\n  }\n  for (let child of children) {\n    if (typeof child !== 'string') {\n      dom.appendChild(child)\n    } else {\n      dom.appendChild(document.createTextNode(child))\n    }\n  }\n  return dom\n}\n\n/**\n * A hex helper function facilitate conversion of from 8 bit\n * numerical presentation of color to base-16.\n */\nexport function hex(n) {\n  return n.toString(16).padStart(2, '0')\n}\n","export class Picture {\n  constructor(width, height, pixels) {\n    this.width = width\n    this.height = height\n    this.pixels = pixels\n  }\n\n  static empty(width, height, color) {\n    let pixels = new Array(width * height).fill(color)\n    return new Picture(width, height, pixels)\n  }\n\n  pixel(x, y) {\n    return this.pixels[x + y * this.width]\n  }\n\n  draw(pixels) {\n    let copy = this.pixels.slice()\n    for (let { x, y, color } of pixels) {\n      copy[x + y * this.width] = color\n    }\n    return new Picture(this.width, this.height, copy)\n  }\n}\n\nexport function drawPicture(picture, canvas, scale) {\n  canvas.width = picture.width * scale\n  canvas.height = picture.height * scale\n  let ctx = canvas.getContext('2d')\n\n  for (let y = 0; y < picture.height; y++) {\n    for (let x = 0; x < picture.width; x++) {\n      ctx.fillStyle = picture.pixel(x, y)\n      ctx.fillRect(x * scale, y * scale, scale, scale)\n    }\n  }\n}\n","import { elt } from '../utils'\nimport { drawPicture } from './picture'\n\nconst SCALE = 10\n\nexport class PictureCanvas {\n  constructor(picture, pointerDown) {\n    this.dom = elt('canvas', {\n      onmousedown: (event) => this.mouse(event, pointerDown),\n      ontouchstart: (event) => this.touch(event, pointerDown),\n    })\n    this.syncState(picture)\n  }\n\n  syncState(picture) {\n    if (this.picture == picture) return\n    this.picture = picture\n    drawPicture(this.picture, this.dom, SCALE)\n  }\n}\n\nPictureCanvas.prototype.mouse = function (downEvent, onDown) {\n  // return if not a left click\n  if (downEvent.button != 0) return\n  let pos = pointerPosition(downEvent, this.dom)\n  let onMove = onDown(pos)\n  if (!onMove) return\n\n  let move = (moveEvent) => {\n    if (moveEvent.buttons == 0) {\n      this.dom.removeEventListener('mousemove', move)\n    } else {\n      let newPos = pointerPosition(moveEvent, this.dom)\n      if (newPos.x == pos.x && newPos.y == pos.y) return\n      onMove(newPos)\n    }\n  }\n  this.dom.addEventListener('mousemove', move)\n}\n\nfunction pointerPosition(pos, domNode) {\n  let rect = domNode.getBoundingClientRect()\n  return {\n    x: Math.floor((pos.clientX - rect.left) / SCALE),\n    y: Math.floor((pos.clientY - rect.top) / SCALE),\n  }\n}\n\nPictureCanvas.prototype.touch = function (startEvent, onDown) {\n  let pos = pointerPosition(startEvent.touches[0], this.dom)\n  let onMove = onDown(pos)\n  startEvent.preventDefault()\n  if (!onMove) return\n\n  let move = (moveEvent) => {\n    let newPos = pointerPosition(moveEvent.touches[0], this.dom)\n    if (newPos.x == pos.x && newPos.y == pos.y) return\n    pos = newPos\n    onMove(newPos)\n  }\n  let end = () => {\n    this.dom.removeEventListener('touchmove', move)\n    this.dom.removeEventListener('touchend', move)\n  }\n  this.dom.addEventListener('touchmove', move)\n  this.dom.addEventListener('touchend', end)\n}\n","import { PictureCanvas } from './components/picture-canvas'\nimport { elt } from './utils'\n\nexport class PixelEditor {\n  constructor(state, config) {\n    let { tools, controls, dispatch } = config\n    this.state = state\n    this.canvas = new PictureCanvas(state.picture, (pos) => {\n      let tool = tools[this.state.tool]\n      let onMove = tool(pos, this.state, dispatch)\n      if (onMove) {\n        return (pos) => onMove(pos, this.state)\n      }\n    })\n    this.controls = controls.map((Control) => new Control(state, config))\n    this.dom = elt(\n      'div',\n      {},\n      this.canvas.dom,\n      elt('br'),\n      ...this.controls.reduce((a, c) => a.concat(' ', c.dom), [])\n    )\n  }\n\n  syncState(state) {\n    this.state = state\n    this.canvas.syncState(state.picture)\n    for (let ctrl of this.controls) {\n      ctrl.syncState(state)\n    }\n  }\n}\n","import { elt } from '../utils'\n\nexport class ColorSelect {\n  constructor(state, { dispatch }) {\n    this.input = elt('input', {\n      type: 'color',\n      value: state.color,\n      onchange: () => dispatch({ color: this.input.value }),\n    })\n    this.dom = elt('label', null, '🎨 Color: ', this.input)\n  }\n\n  /**\n   * Sync the ColorSelect state\n   * @param {*} state\n   */\n  syncState(state) {\n    this.input.value = state.color\n  }\n}\n","import { elt } from '../utils'\n\nexport class ToolSelect {\n  constructor(state, { tools, dispatch }) {\n    this.select = elt(\n      'select',\n      {\n        onchange: () => dispatch({ tool: this.select.value }),\n      },\n      ...Object.keys(tools).map((name) =>\n        elt(\n          'option',\n          {\n            selected: name == state.tool,\n          },\n          name\n        )\n      )\n    )\n    this.dom = elt('label', null, 'Tool: ', this.select)\n  }\n\n  /**\n   * Sync ToolSelect state\n   * @param {*} state\n   */\n  syncState(state) {\n    this.select.value = state.tool\n  }\n}\n","import { ColorSelect } from './color-select'\nimport { ToolSelect } from './tool-select'\n\nexport { ColorSelect, ToolSelect }\n","/**\n * The draw tool\n */\nexport function draw(pos, state, dispatch) {\n  function drawPixel({ x, y }, state) {\n    let drawn = { x, y, color: state.color }\n    dispatch({ picture: state.picture.draw([drawn]) })\n  }\n  // immediate call to drawPixel and a return call of the same function\n  drawPixel(pos, state)\n  return drawPixel\n}\n\n/**\n * To draw larger shapes, it can be useful to quickly create rectangles.\n */\nexport function rectangle(start, state, dispatch) {\n  function drawRectangle(pos) {\n    let xStart = Math.min(start.x, pos.x)\n    let yStart = Math.min(start.y, pos.y)\n    let xEnd = Math.max(start.x, pos.x)\n    let yEnd = Math.max(start.y, pos.y)\n    let drawn = []\n    for (let y = yStart; y <= yEnd; y++) {\n      for (let x = xStart; x <= xEnd; x++) {\n        drawn.push({ x, y, color: state.color })\n      }\n    }\n    dispatch({ picture: state.picture.draw(drawn) })\n  }\n  drawRectangle(start)\n  return drawRectangle\n}\n\n/**\n * To quickly draw circles\n */\nexport function circle(start, state, dispatch) {\n  function drawCircle(pos) {\n    const radius = Math.sqrt(\n      // eslint-disable-next-line no-restricted-properties\n      Math.pow(pos.x - start.x, 2) + Math.pow(pos.y - start.y, 2)\n    )\n    const centerX = start.x + radius\n    const centerY = start.y + radius\n    let drawn = []\n    for (let y = centerY - radius; y <= centerY + radius; y++) {\n      for (let x = centerX - radius; x <= centerX + radius; x++) {\n        const distance = Math.sqrt(\n          // eslint-disable-next-line no-restricted-properties\n          Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2)\n        )\n        if (distance <= radius) {\n          drawn.push({ x, y, color: state.color })\n        }\n      }\n    }\n    dispatch({ picture: state.picture.draw(drawn) })\n  }\n  drawCircle(start)\n  return drawCircle\n}\n\nconst around = [\n  { dx: -1, dy: 0 },\n  { dx: 1, dy: 0 },\n  { dx: 0, dy: -1 },\n  { dx: 0, dy: 1 },\n]\n\n/**\n * Flood fill tool.\n */\nexport function fill({ x, y }, state, dispatch) {\n  let targetColor = state.picture.pixel(x, y)\n  let drawn = [{ x, y, color: state.color }]\n  for (let done = 0; done < drawn.length; done++) {\n    for (let { dx, dy } of around) {\n      // eslint-disable-next-line one-var\n      let x = drawn[done].x + dx,\n        y = drawn[done].y + dy\n      if (\n        x >= 0 &&\n        x < state.picture.width &&\n        y >= 0 &&\n        y < state.picture.height &&\n        state.picture.pixel(x, y) == targetColor &&\n        !drawn.some((p) => p.x == x && p.y == y)\n      ) {\n        drawn.push({ x, y, color: state.color })\n      }\n    }\n  }\n  dispatch({ picture: state.picture.draw(drawn) })\n}\n\n/**\n * Color picker tool\n */\nexport function pick(pos, state, dispatch) {\n  dispatch({ color: state.picture.pixel(pos.x, pos.y) })\n}\n","import { elt, hex } from '../utils'\nimport { Picture } from './picture'\n\nexport class LoadButton {\n  constructor(_, { dispatch }) {\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => startLoad(dispatch),\n      },\n      '📁 Load'\n    )\n  }\n\n  syncState() {\n    // unimplemented\n  }\n}\n\n/**\n * Gets the file from the user's computer through use of an `<input>` HTML element with the `file` attribute\n * @param {*} dispatch\n */\nfunction startLoad(dispatch) {\n  let input = elt('input', {\n    type: 'file',\n    onchange: () => finishLoad(input.files[0], dispatch),\n  })\n  document.body.appendChild(input)\n  input.click()\n  input.remove()\n}\n\n/**\n * When the user has selected a file, we use the `FileReader` to\n * get access to its contents, again as a data URL.\n * This URL can be used to create a `<img>` element; since we can't\n * get direct access to the pixels in such an image, we can't create\n * a `Picture` object from that. A call to `pictureFromImage` handles this conversion.\n * @param {*} file\n * @param {*} dispatch\n */\nfunction finishLoad(file, dispatch) {\n  if (file == null) return\n  let reader = new FileReader()\n  reader.addEventListener('load', () => {\n    let image = elt('img', {\n      onload: () =>\n        dispatch({\n          picture: pictureFromImage(image),\n        }),\n      src: reader.result,\n    })\n  })\n  reader.readAsDataURL(file)\n}\n\nfunction pictureFromImage(image) {\n  let width = Math.min(100, image.width)\n  let height = Math.min(100, image.height)\n  let canvas = elt('canvas', { width, height })\n  let ctx = canvas.getContext('2d')\n  ctx.drawImage(image, 0, 0)\n  let pixels = []\n  // this data property is an array of color components\n  // contains 4 values which represent reg, green, blue and alpha (for transparency) of the pixel's color as 8 bit numbers (0-255)\n  let { data } = ctx.getImageData(0, 0, width, height)\n\n  for (let i = 0; i < data.length; i += 4) {\n    let [r, g, b] = data.slice(i, i + 3)\n    pixels.push(`#${hex(r)}${hex(g)}${hex(b)}`)\n  }\n  return new Picture(width, height, pixels)\n}\n","import { elt } from '../utils'\nimport { drawPicture } from './picture'\n\nexport class SaveButton {\n  constructor(state) {\n    this.picture = state.picture\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => this.save(),\n      },\n      '💾 Save'\n    )\n  }\n\n  save() {\n    let canvas = elt('canvas')\n    drawPicture(this.picture, canvas, 10)\n    let link = elt('a', {\n      href: canvas.toDataURL(),\n      download: 'pixel-art.png',\n    })\n    document.body.appendChild(link)\n    link.click()\n    link.remove()\n  }\n\n  syncState(state) {\n    this.picture = state.picture\n  }\n}\n","import { elt } from '../utils'\n\nexport class UndoButton {\n  constructor(state, { dispatch }) {\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => dispatch({ undo: true }),\n        disabled: state.done.length < 2,\n      },\n      '⤴ Undo'\n    )\n  }\n\n  syncState(state) {\n    this.dom.disabled = state.done.length < 2\n  }\n}\n","import { elt } from '../utils'\n\nexport class RedoButton {\n  constructor(state, { dispatch }) {\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => dispatch({ redo: true }),\n        disabled: state.redone.length < 1,\n      },\n      '⤵ Redo'\n    )\n  }\n\n  syncState(state) {\n    this.dom.disabled = state.redone.length < 1\n  }\n}\n","import { LoadButton } from './load-button'\nimport { PictureCanvas } from './picture-canvas'\nimport { Picture } from './picture'\nimport { SaveButton } from './save-button'\nimport { UndoButton } from './undo-button'\nimport { RedoButton } from './redo-button'\n\nexport {\n  LoadButton,\n  PictureCanvas,\n  Picture,\n  SaveButton,\n  UndoButton,\n  RedoButton,\n}\n","import { PixelEditor } from './app'\nimport { ColorSelect, ToolSelect } from './controls'\nimport { draw, fill, pick, rectangle, circle } from './tools'\nimport {\n  Picture,\n  LoadButton,\n  SaveButton,\n  UndoButton,\n  RedoButton,\n} from './components'\n\nconst INITIAL_STATE = {\n  tool: 'draw',\n  color: '#000000',\n  picture: Picture.empty(60, 30, '#f0f0f0'),\n  done: [],\n  redone: [],\n  doneAt: 0,\n}\n\nconst baseTools = {\n  draw,\n  fill,\n  rectangle,\n  pick,\n  circle,\n}\n\nconst baseControls = [\n  ToolSelect,\n  ColorSelect,\n  SaveButton,\n  LoadButton,\n  UndoButton,\n  RedoButton,\n]\n\n// quasi - reducer function\nfunction historyUpdateState(state, action) {\n  if (action.undo) {\n    if (state.done.length < 2) return state\n    let redone = state.done.pop()\n    return {\n      ...state,\n      picture: state.done[state.done.length - 1],\n      done: [...state.done],\n      redone: [...state.redone, redone],\n      doneAt: 0,\n    }\n  }\n\n  if (action.redo) {\n    if (state.redone.length < 1) return state\n    let picture = state.redone.pop()\n    return {\n      ...state,\n      picture,\n      done: [...state.done, picture],\n      redone: [...state.redone],\n      doneAt: 0,\n    }\n  }\n\n  if (action.picture && state.doneAt < Date.now() - 1000) {\n    return {\n      ...state,\n      ...action,\n      done: [...state.done, state.picture],\n      // redone state only relevant on undo, otherwise it remains empty\n      // on regular draw action\n      redone: [],\n      doneAt: Date.now(),\n    }\n  }\n  return { ...state, ...action }\n}\n\nfunction startPixelEditor({\n  state = INITIAL_STATE,\n  tools = baseTools,\n  controls = baseControls,\n}) {\n  const app = new PixelEditor(state, {\n    tools,\n    controls,\n    dispatch(action) {\n      state = historyUpdateState(state, action)\n      app.syncState(state)\n    },\n  })\n  return app.dom\n}\n\ndocument.getElementById('root').appendChild(startPixelEditor({}))\n"]}