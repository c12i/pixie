{"version":3,"sources":["picture.js","utils.js","components/picture-canvas.js","app.js","tools.js","components/load-button.js","components/save-button.js","components/undo-button.js","components/redo-button.js","components/reset-button.js","components/tool-select.js","components/color-select.js","components/index.js","index.js"],"names":["Picture","width","height","pixels","x","y","copy","slice","color","Array","fill","drawPicture","picture","canvas","scale","ctx","getContext","fillStyle","pixel","fillRect","updateState","state","action","elt","type","props","dom","document","createElement","Object","assign","children","child","appendChild","createTextNode","hex","n","toString","padStart","cached","data","localStorage","setItem","JSON","stringify","getCachedState","parse","getItem","done","map","redone","SCALE","PictureCanvas","pointerDown","onmousedown","event","mouse","ontouchstart","touch","syncState","pointerPosition","pos","domNode","rect","getBoundingClientRect","Math","floor","clientX","left","clientY","top","prototype","downEvent","onDown","button","onMove","addEventListener","move","moveEvent","buttons","removeEventListener","newPos","startEvent","touches","preventDefault","PixelEditor","config","tools","controls","dispatch","selectedTool","drawFunction","tool","Control","reduce","a","c","concat","e","undo","metaKey","ctrlKey","code","redo","draw","drawPixel","drawn","rectangle","start","drawRectangle","xStart","min","yStart","xEnd","max","yEnd","push","circle","drawCircle","radius","sqrt","pow","centerX","centerY","triangle","drawTriangle","x1","y1","x2","y2","deltaX","abs","deltaY","signX","signY","error","error2","around","dx","dy","targetColor","length","some","p","pick","LoadButton","_","onclick","startLoad","input","onchange","finishLoad","files","body","click","remove","file","reader","FileReader","image","onload","pictureFromImage","src","result","readAsDataURL","drawImage","getImageData","i","r","g","b","SaveButton","save","link","href","toDataURL","download","UndoButton","disabled","RedoButton","ResetButton","confirm","reset","ToolSelect","select","value","keys","name","selected","ColorSelect","INITIAL_STATE","empty","doneAt","baseTools","baseControls","historyUpdateState","pop","Date","now","startPixelEditor","app","getElementById"],"mappings":"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","file":"src.8fc0dc43.js","sourceRoot":"../src","sourcesContent":["/**\n * This class represents the picture in the canvas\n */\nexport class Picture {\n  constructor(width, height, pixels) {\n    this.width = width\n    this.height = height\n    this.pixels = pixels\n  }\n\n  static empty(width, height, color) {\n    let pixels = new Array(width * height).fill(color)\n    return new Picture(width, height, pixels)\n  }\n\n  pixel(x, y) {\n    return this.pixels[x + y * this.width]\n  }\n\n  draw(pixels) {\n    let copy = this.pixels.slice()\n    for (let { x, y, color } of pixels) {\n      copy[x + y * this.width] = color\n    }\n    return new Picture(this.width, this.height, copy)\n  }\n}\n\nexport function drawPicture(picture, canvas, scale) {\n  canvas.width = picture.width * scale\n  canvas.height = picture.height * scale\n  let ctx = canvas.getContext('2d')\n\n  for (let y = 0; y < picture.height; y++) {\n    for (let x = 0; x < picture.width; x++) {\n      ctx.fillStyle = picture.pixel(x, y)\n      ctx.fillRect(x * scale, y * scale, scale, scale)\n    }\n  }\n}\n","import { Picture } from './picture'\n\n/**\n * Update object state\n */\nexport function updateState(state, action) {\n  return { ...state, ...action }\n}\n\n/**\n * A less verbose DOM builder\n */\nexport function elt(type, props, ...children) {\n  let dom = document.createElement(type)\n  if (props) {\n    Object.assign(dom, props)\n  }\n  for (let child of children) {\n    if (typeof child !== 'string') {\n      dom.appendChild(child)\n    } else {\n      dom.appendChild(document.createTextNode(child))\n    }\n  }\n  return dom\n}\n\n/**\n * A hex helper function facilitate conversion of from 8 bit\n * numerical presentation of color to base-16.\n */\nexport function hex(n) {\n  return n.toString(16).padStart(2, '0')\n}\n\n/**\n * Cache data to local storage\n */\nexport function cached(data) {\n  localStorage.setItem('_state', JSON.stringify(data))\n  return data\n}\n\n/**\n * Get cached state from local storage\n */\nexport function getCachedState() {\n  let state = JSON.parse(localStorage.getItem('_state'))\n  if (!state) return\n  state.done = state.done.map(\n    ({ width, height, pixels }) => new Picture(width, height, pixels)\n  )\n  state.redone = state.redone.map(\n    ({ width, height, pixels }) => new Picture(width, height, pixels)\n  )\n  state.picture = new Picture(\n    state.picture.width,\n    state.picture.height,\n    state.picture.pixels\n  )\n  return state\n}\n","import { elt } from '../utils'\nimport { drawPicture } from '../picture'\n\nconst SCALE = 10\n\nexport class PictureCanvas {\n  constructor(picture, pointerDown) {\n    this.dom = elt('canvas', {\n      onmousedown: (event) => this.mouse(event, pointerDown),\n      ontouchstart: (event) => this.touch(event, pointerDown),\n    })\n    this.syncState(picture)\n  }\n\n  syncState(picture) {\n    if (this.picture == picture) return\n    this.picture = picture\n    drawPicture(this.picture, this.dom, SCALE)\n  }\n}\n\nPictureCanvas.prototype.mouse = function (downEvent, onDown) {\n  // return if not a left click\n  if (downEvent.button != 0) return\n  let pos = pointerPosition(downEvent, this.dom)\n  let onMove = onDown(pos)\n  if (!onMove) return\n\n  let move = (moveEvent) => {\n    if (moveEvent.buttons == 0) {\n      this.dom.removeEventListener('mousemove', move)\n    } else {\n      let newPos = pointerPosition(moveEvent, this.dom)\n      if (newPos.x == pos.x && newPos.y == pos.y) return\n      onMove(newPos)\n    }\n  }\n  this.dom.addEventListener('mousemove', move)\n}\n\nfunction pointerPosition(pos, domNode) {\n  let rect = domNode.getBoundingClientRect()\n  return {\n    x: Math.floor((pos.clientX - rect.left) / SCALE),\n    y: Math.floor((pos.clientY - rect.top) / SCALE),\n  }\n}\n\nPictureCanvas.prototype.touch = function (startEvent, onDown) {\n  let pos = pointerPosition(startEvent.touches[0], this.dom)\n  let onMove = onDown(pos)\n  startEvent.preventDefault()\n  if (!onMove) return\n\n  let move = (moveEvent) => {\n    let newPos = pointerPosition(moveEvent.touches[0], this.dom)\n    if (newPos.x == pos.x && newPos.y == pos.y) return\n    pos = newPos\n    onMove(newPos)\n  }\n  let end = () => {\n    this.dom.removeEventListener('touchmove', move)\n    this.dom.removeEventListener('touchend', move)\n  }\n  this.dom.addEventListener('touchmove', move)\n  this.dom.addEventListener('touchend', end)\n}\n","import { PictureCanvas } from './components/picture-canvas'\nimport { elt } from './utils'\n\nexport class PixelEditor {\n  constructor(state, config) {\n    let { tools, controls, dispatch } = config\n    this.state = state\n    this.canvas = new PictureCanvas(state.picture, (pos) => {\n      let selectedTool = tools[this.state.tool]\n      // call the selected tool util in ./src/tools.js\n      let drawFunction = selectedTool(pos, this.state, dispatch)\n      if (drawFunction) {\n        // call the function returned by the selected tool\n        return (pos) => drawFunction(pos, this.state)\n      }\n    })\n    this.controls = controls.map((Control) => new Control(state, config))\n    this.dom = elt(\n      'div',\n      {},\n      this.canvas.dom,\n      elt('br'),\n      ...this.controls.reduce((a, c) => a.concat(' ', c.dom), [])\n    )\n    document.addEventListener('keydown', (e) => {\n      e.preventDefault()\n      dispatch({\n        undo: (e.metaKey || e.ctrlKey) && e.code === 'KeyZ',\n        redo: (e.metaKey || e.ctrlKey) && e.code === 'KeyY',\n      })\n    })\n  }\n\n  syncState(state) {\n    this.state = state\n    this.canvas.syncState(state.picture)\n    for (let ctrl of this.controls) {\n      ctrl.syncState(state)\n    }\n  }\n}\n","/**\n * The draw tool\n */\nexport function draw(pos, state, dispatch) {\n  function drawPixel({ x, y }, state) {\n    let drawn = { x, y, color: state.color }\n    dispatch({ picture: state.picture.draw([drawn]) })\n  }\n  // immediate call to drawPixel and a return call of the same function\n  drawPixel(pos, state)\n  return drawPixel\n}\n\n/**\n * To draw larger shapes, it can be useful to quickly create rectangles.\n */\nexport function rectangle(start, state, dispatch) {\n  function drawRectangle(pos) {\n    let xStart = Math.min(start.x, pos.x)\n    let yStart = Math.min(start.y, pos.y)\n    let xEnd = Math.max(start.x, pos.x)\n    let yEnd = Math.max(start.y, pos.y)\n    let drawn = []\n    for (let y = yStart; y <= yEnd; y++) {\n      for (let x = xStart; x <= xEnd; x++) {\n        drawn.push({ x, y, color: state.color })\n      }\n    }\n    dispatch({ picture: state.picture.draw(drawn) })\n  }\n  drawRectangle(start)\n  return drawRectangle\n}\n\n/**\n * To quickly draw circles\n * assisted by chatGPT\n */\nexport function circle(start, state, dispatch) {\n  function drawCircle(pos) {\n    const radius = Math.sqrt(\n      // eslint-disable-next-line no-restricted-properties\n      Math.pow(pos.x - start.x, 2) + Math.pow(pos.y - start.y, 2)\n    )\n    const centerX = start.x + radius\n    const centerY = start.y + radius\n    let drawn = []\n    for (let y = centerY - radius; y <= centerY + radius; y++) {\n      for (let x = centerX - radius; x <= centerX + radius; x++) {\n        const distance = Math.sqrt(\n          // eslint-disable-next-line no-restricted-properties\n          Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2)\n        )\n        if (distance <= radius) {\n          drawn.push({ x, y, color: state.color })\n        }\n      }\n    }\n    dispatch({ picture: state.picture.draw(drawn) })\n  }\n  drawCircle(start)\n  return drawCircle\n}\n\n/**\n * This function uses the Bresenham's line algorithm to draw a triangle\n * on the canvas\n * assisted by chatGPT\n */\nexport function triangle(start, state, dispatch) {\n  function drawTriangle(pos) {\n    const x1 = start.x\n    const y1 = start.y\n    const x2 = pos.x\n    const y2 = pos.y\n    const deltaX = Math.abs(x2 - x1)\n    const deltaY = Math.abs(y2 - y1)\n    const signX = x1 < x2 ? 1 : -1\n    const signY = y1 < y2 ? 1 : -1\n    let x = x1\n    let y = y1\n    let error = deltaX - deltaY\n    let drawn = []\n\n    while (x !== x2 || y !== y2) {\n      drawn.push({ x, y, color: state.color })\n      const error2 = 2 * error\n      if (error2 > -deltaY) {\n        error -= deltaY\n        x += signX\n      }\n      if (error2 < deltaX) {\n        error += deltaX\n        y += signY\n      }\n    }\n    drawn.push({ x: x2, y: y2, color: state.color })\n\n    dispatch({ picture: state.picture.draw(drawn) })\n  }\n\n  drawTriangle(start)\n  return drawTriangle\n}\n\nconst around = [\n  { dx: -1, dy: 0 },\n  { dx: 1, dy: 0 },\n  { dx: 0, dy: -1 },\n  { dx: 0, dy: 1 },\n]\n\n/**\n * Flood fill tool.\n */\nexport function fill({ x, y }, state, dispatch) {\n  let targetColor = state.picture.pixel(x, y)\n  let drawn = [{ x, y, color: state.color }]\n  for (let done = 0; done < drawn.length; done++) {\n    for (let { dx, dy } of around) {\n      // eslint-disable-next-line one-var\n      let x = drawn[done].x + dx,\n        y = drawn[done].y + dy\n      if (\n        x >= 0 &&\n        x < state.picture.width &&\n        y >= 0 &&\n        y < state.picture.height &&\n        state.picture.pixel(x, y) == targetColor &&\n        !drawn.some((p) => p.x == x && p.y == y)\n      ) {\n        drawn.push({ x, y, color: state.color })\n      }\n    }\n  }\n  dispatch({ picture: state.picture.draw(drawn) })\n}\n\n/**\n * Color picker tool\n */\nexport function pick(pos, state, dispatch) {\n  dispatch({ color: state.picture.pixel(pos.x, pos.y) })\n}\n","import { elt, hex } from '../utils'\nimport { Picture } from '../picture'\n\nexport class LoadButton {\n  constructor(_, { dispatch }) {\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => startLoad(dispatch),\n      },\n      '📁 Load'\n    )\n  }\n\n  syncState() {\n    // unimplemented\n  }\n}\n\n/**\n * Gets the file from the user's computer through use of an `<input>` HTML element with the `file` attribute\n * @param {*} dispatch\n */\nfunction startLoad(dispatch) {\n  let input = elt('input', {\n    type: 'file',\n    onchange: () => finishLoad(input.files[0], dispatch),\n  })\n  document.body.appendChild(input)\n  input.click()\n  input.remove()\n}\n\n/**\n * When the user has selected a file, we use the `FileReader` to\n * get access to its contents, again as a data URL.\n * This URL can be used to create a `<img>` element; since we can't\n * get direct access to the pixels in such an image, we can't create\n * a `Picture` object from that. A call to `pictureFromImage` handles this conversion.\n * @param {*} file\n * @param {*} dispatch\n */\nfunction finishLoad(file, dispatch) {\n  if (file == null) return\n  let reader = new FileReader()\n  reader.addEventListener('load', () => {\n    let image = elt('img', {\n      onload: () =>\n        dispatch({\n          picture: pictureFromImage(image),\n        }),\n      src: reader.result,\n    })\n  })\n  reader.readAsDataURL(file)\n}\n\nfunction pictureFromImage(image) {\n  let width = Math.min(100, image.width)\n  let height = Math.min(100, image.height)\n  let canvas = elt('canvas', { width, height })\n  let ctx = canvas.getContext('2d')\n  ctx.drawImage(image, 0, 0)\n  let pixels = []\n  // this data property is an array of color components\n  // contains 4 values which represent reg, green, blue and alpha (for transparency) of the pixel's color as 8 bit numbers (0-255)\n  let { data } = ctx.getImageData(0, 0, width, height)\n\n  for (let i = 0; i < data.length; i += 4) {\n    let [r, g, b] = data.slice(i, i + 3)\n    pixels.push(`#${hex(r)}${hex(g)}${hex(b)}`)\n  }\n  return new Picture(width, height, pixels)\n}\n","import { elt } from '../utils'\nimport { drawPicture } from '../picture'\n\nexport class SaveButton {\n  constructor(state) {\n    this.picture = state.picture\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => this.save(),\n      },\n      '💾 Save'\n    )\n  }\n\n  save() {\n    let canvas = elt('canvas')\n    drawPicture(this.picture, canvas, 10)\n    let link = elt('a', {\n      href: canvas.toDataURL(),\n      download: 'pixel-art.png',\n    })\n    document.body.appendChild(link)\n    link.click()\n    link.remove()\n  }\n\n  syncState(state) {\n    this.picture = state.picture\n  }\n}\n","import { elt } from '../utils'\n\nexport class UndoButton {\n  constructor(state, { dispatch }) {\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => dispatch({ undo: true }),\n        disabled: state.done.length < 2,\n      },\n      '⤴ Undo'\n    )\n  }\n\n  syncState(state) {\n    this.dom.disabled = state.done.length < 2\n  }\n}\n","import { elt } from '../utils'\n\nexport class RedoButton {\n  constructor(state, { dispatch }) {\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => dispatch({ redo: true }),\n        disabled: state.redone.length < 1,\n      },\n      '⤵ Redo'\n    )\n  }\n\n  syncState(state) {\n    this.dom.disabled = state.redone.length < 1\n  }\n}\n","import { elt } from '../utils'\n\nexport class ResetButton {\n  constructor(state, { dispatch }) {\n    this.dom = elt(\n      'button',\n      {\n        onclick: () => {\n          // eslint-disable-next-line no-restricted-globals, no-alert\n          if (confirm('Are you sure you want to reset the canvas?')) {\n            dispatch({ reset: true })\n          }\n        },\n        disabled: !state.done.length,\n      },\n      '🔁 Reset'\n    )\n  }\n\n  syncState(state) {\n    this.dom.disabled = !state.done.length\n  }\n}\n","import { elt } from '../utils'\n\nexport class ToolSelect {\n  constructor(state, { tools, dispatch }) {\n    this.select = elt(\n      'select',\n      {\n        onchange: () => dispatch({ tool: this.select.value }),\n      },\n      ...Object.keys(tools).map((name) =>\n        elt(\n          'option',\n          {\n            selected: name == state.tool,\n          },\n          name\n        )\n      )\n    )\n    this.dom = elt('label', null, 'Tool: ', this.select)\n  }\n\n  /**\n   * Sync ToolSelect state\n   * @param {*} state\n   */\n  syncState(state) {\n    this.select.value = state.tool\n  }\n}\n","import { elt } from '../utils'\n\nexport class ColorSelect {\n  constructor(state, { dispatch }) {\n    this.input = elt('input', {\n      type: 'color',\n      value: state.color,\n      onchange: () => dispatch({ color: this.input.value }),\n    })\n    this.dom = elt('label', null, '🎨 Color: ', this.input)\n  }\n\n  /**\n   * Sync the ColorSelect state\n   * @param {*} state\n   */\n  syncState(state) {\n    this.input.value = state.color\n  }\n}\n","import { LoadButton } from './load-button'\nimport { PictureCanvas } from './picture-canvas'\nimport { SaveButton } from './save-button'\nimport { UndoButton } from './undo-button'\nimport { RedoButton } from './redo-button'\nimport { ResetButton } from './reset-button'\nimport { ToolSelect } from './tool-select'\nimport { ColorSelect } from './color-select'\n\nexport {\n  LoadButton,\n  PictureCanvas,\n  SaveButton,\n  UndoButton,\n  RedoButton,\n  ResetButton,\n  ToolSelect,\n  ColorSelect,\n}\n","import { PixelEditor } from './app'\nimport { draw, fill, pick, rectangle, circle, triangle } from './tools'\nimport {\n  LoadButton,\n  SaveButton,\n  UndoButton,\n  RedoButton,\n  ResetButton,\n  ToolSelect,\n  ColorSelect,\n} from './components'\nimport { Picture } from './picture'\nimport { cached, getCachedState } from './utils'\n\nconst INITIAL_STATE = {\n  tool: 'draw',\n  color: '#000000',\n  picture: Picture.empty(60, 30, '#f0f0f0'),\n  done: [],\n  redone: [],\n  doneAt: 0,\n}\n\nconst baseTools = {\n  draw,\n  fill,\n  pick,\n  rectangle,\n  circle,\n  triangle,\n}\n\nconst baseControls = [\n  ToolSelect,\n  ColorSelect,\n  SaveButton,\n  LoadButton,\n  UndoButton,\n  RedoButton,\n  ResetButton,\n]\n\n// quasi - reducer function\nfunction historyUpdateState(state, action) {\n  if (action.undo) {\n    if (state.done.length < 2) return state\n    let redone = state.done.pop()\n    return cached({\n      ...state,\n      picture: state.done[state.done.length - 1],\n      done: [...state.done],\n      redone: [...state.redone, redone],\n      doneAt: 0,\n    })\n  }\n\n  if (action.redo) {\n    if (state.redone.length < 1) return state\n    let picture = state.redone.pop()\n    return cached({\n      ...state,\n      picture,\n      done: [...state.done, picture],\n      redone: [...state.redone],\n      doneAt: 0,\n    })\n  }\n\n  if (action.reset) {\n    let picture = Picture.empty(60, 30, '#f0f0f0')\n    return cached({\n      ...state,\n      picture,\n      done: [],\n      redone: [],\n    })\n  }\n\n  if (action.picture && state.doneAt < Date.now() - 1000) {\n    return cached({\n      ...state,\n      ...action,\n      done: [...state.done, state.picture],\n      // redone state only relevant on undo, otherwise it remains empty\n      // on regular picture action\n      redone: [],\n      doneAt: Date.now(),\n    })\n  }\n  return cached({ ...state, ...action })\n}\n\nfunction startPixelEditor({\n  state = getCachedState() ?? INITIAL_STATE,\n  tools = baseTools,\n  controls = baseControls,\n}) {\n  const app = new PixelEditor(state, {\n    tools,\n    controls,\n    dispatch(action) {\n      state = historyUpdateState(state, action)\n      app.syncState(state)\n    },\n  })\n  return app.dom\n}\n\ndocument.getElementById('root').appendChild(startPixelEditor({}))\n"]}